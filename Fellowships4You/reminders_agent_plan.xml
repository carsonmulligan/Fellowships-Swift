<?xml version="1.0" encoding="UTF-8"?>
<reminders_implementation_plan>
    <overview>
        Add reminders functionality to Fellowships4You using EventKit framework, allowing users to set reminders for scholarship deadlines with multiple preset options.
    </overview>

    <prerequisites>
        <info_plist_modifications>
            <key>NSRemindersUsageDescription</key>
            <string>Fellowships4You needs access to reminders to help you track scholarship deadlines</string>
        </info_plist_modifications>
    </prerequisites>

    <new_files>
        <file name="ReminderService.swift">
            <purpose>Handles all EventKit interactions and reminder management</purpose>
            <key_components>
                <component>EKEventStore instance for managing reminders</component>
                <component>Permission request handling</component>
                <component>Methods for creating and managing reminders</component>
            </key_components>
        </file>
    </new_files>

    <model_updates>
        <struct name="Scholarship">
            <additions>
                <!-- Add computed properties for deadline calculations -->
                <property>
                    <name>daysUntilDeadline</name>
                    <type>Int</type>
                    <computation>Calculate days between current date and dueDate</computation>
                </property>
            </additions>
        </struct>
    </model_updates>

    <ui_updates>
        <component name="ScholarshipRow">
            <additions>
                <!-- Add days until deadline display -->
                <element>
                    <description>Text showing days until deadline next to due date</description>
                    <format>"X days remaining"</format>
                </element>
                <!-- Add reminder bell icon -->
                <element>
                    <description>Bell icon button next to bookmark</description>
                    <action>Shows reminder options sheet</action>
                </element>
            </additions>
        </component>

        <component name="ScholarshipDetailView">
            <additions>
                <element>
                    <description>Bell icon in header next to bookmark</description>
                    <action>Shows reminder options sheet</action>
                </element>
            </additions>
        </component>

        <new_component name="ReminderOptionsSheet">
            <description>Sheet presenting reminder timing options</description>
            <options>
                <option>
                    <label>Tomorrow</label>
                    <timing>Next day at 9:00 AM</timing>
                </option>
                <option>
                    <label>90 days before deadline</label>
                    <timing>90 days before dueDate at 9:00 AM</timing>
                </option>
                <option>
                    <label>120 days before deadline</label>
                    <timing>120 days before dueDate at 9:00 AM</timing>
                </option>
            </options>
        </new_component>
    </ui_updates>

    <implementation_steps>
        <step order="1">
            <title>Create ReminderService</title>
            <code_example>
                class ReminderService {
                    private let store = EKEventStore()
                    
                    func requestAccess() async throws -> Bool {
                        return try await store.requestAccess(to: .reminder)
                    }
                    
                    func createReminder(for scholarship: Scholarship, daysBeforeDeadline: Int?) async throws {
                        guard let dueDate = dateFromString(scholarship.dueDate) else { return }
                        
                        let reminder = EKReminder(eventStore: store)
                        reminder.title = "Deadline approaching: \(scholarship.name)"
                        reminder.notes = "Application deadline for \(scholarship.name)\n\n\(scholarship.description)"
                        
                        // Set calendar
                        reminder.calendar = store.defaultCalendarForNewReminders()
                        
                        // Set due date
                        let reminderDate: Date
                        if let daysBeforeDeadline = daysBeforeDeadline {
                            reminderDate = dueDate.addingTimeInterval(-TimeInterval(daysBeforeDeadline * 24 * 60 * 60))
                        } else {
                            reminderDate = Date().addingTimeInterval(24 * 60 * 60) // tomorrow
                        }
                        
                        // Set alarm
                        let alarm = EKAlarm(absoluteDate: reminderDate)
                        reminder.addAlarm(alarm)
                        
                        try store.save(reminder, commit: true)
                    }
                }
            </code_example>
        </step>

        <step order="2">
            <title>Add DateFormatter Extension</title>
            <code_example>
                extension Scholarship {
                    var daysUntilDeadline: Int {
                        guard let dueDate = dateFromString(self.dueDate) else { return 0 }
                        let calendar = Calendar.current
                        let today = calendar.startOfDay(for: Date())
                        let deadline = calendar.startOfDay(for: dueDate)
                        return calendar.dateComponents([.day], from: today, to: deadline).day ?? 0
                    }
                }
            </code_example>
        </step>

        <step order="3">
            <title>Create ReminderOptionsSheet View</title>
            <code_example>
                struct ReminderOptionsSheet: View {
                    let scholarship: Scholarship
                    @Environment(\.dismiss) private var dismiss
                    @StateObject private var reminderService = ReminderService()
                    
                    var body: some View {
                        NavigationView {
                            List {
                                Button("Tomorrow") {
                                    Task {
                                        try? await reminderService.createReminder(for: scholarship, daysBeforeDeadline: nil)
                                        dismiss()
                                    }
                                }
                                
                                Button("90 days before deadline") {
                                    Task {
                                        try? await reminderService.createReminder(for: scholarship, daysBeforeDeadline: 90)
                                        dismiss()
                                    }
                                }
                                
                                Button("120 days before deadline") {
                                    Task {
                                        try? await reminderService.createReminder(for: scholarship, daysBeforeDeadline: 120)
                                        dismiss()
                                    }
                                }
                            }
                            .navigationTitle("Set Reminder")
                            .navigationBarItems(trailing: Button("Cancel") { dismiss() })
                        }
                    }
                }
            </code_example>
        </step>

        <step order="4">
            <title>Update ScholarshipRow and ScholarshipDetailView</title>
            <code_example>
                // Add to ScholarshipRow and ScholarshipDetailView
                @State private var showingReminderOptions = false
                
                // Add to view body
                Button(action: { showingReminderOptions = true }) {
                    Image(systemName: "bell")
                        .foregroundColor(.blue)
                }
                .sheet(isPresented: $showingReminderOptions) {
                    ReminderOptionsSheet(scholarship: scholarship)
                }
            </code_example>
        </step>
    </implementation_steps>

    <testing_scenarios>
        <scenario>
            <description>Test permission handling</description>
            <steps>
                1. First app launch should request reminders permission
                2. Verify proper handling of both accept/deny cases
            </steps>
        </scenario>
        <scenario>
            <description>Test reminder creation</description>
            <steps>
                1. Set reminder for each timing option
                2. Verify reminders appear in iOS Reminders app
                3. Verify reminder content and timing are correct
            </steps>
        </scenario>
        <scenario>
            <description>Test date calculations</description>
            <steps>
                1. Verify days until deadline calculation
                2. Test with past dates, future dates, and edge cases
            </steps>
        </scenario>
    </testing_scenarios>
</reminders_implementation_plan> 